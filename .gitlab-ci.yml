image: cuda10.0-mpi-hdf5-mpl

# Is performed before the scripts in the stages step
before_script:
    - export OMP_PROC_BIND=close
    - export OMP_PLACES=cores
    - export OMP_NUM_THREADS=1
    - export CMAKE_VERSION=3.10.3
    - export CTEST_OUTPUT_ON_FAILURE=1
    - export J=$(( $(nproc --all) / 4  + 1 )) && echo Using ${J} cores during build
    - wget -qO- http://www.cmake.org/files/v${CMAKE_VERSION:0:4}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz | tar -xz
    - export PATH=${PWD}/cmake-${CMAKE_VERSION}-Linux-x86_64/bin:$PATH
    - export GOLD_STANDARD_VER=2
    - if [ `cat tst/regression/gold_standard/current_version` != ${GOLD_STANDARD_VER} ]; then
      echo "Updating regression Gold standard to ${GOLD_STANDARD_VER}." &&
      wget -qO- https://pgrete.de/dl/parthenon_regression_gold_r${GOLD_STANDARD_VER}.tgz | tar -xz -C tst/regression/gold_standard; fi

cache:
  paths:
    - tst/regression/gold_standard/

variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - unit
  - performance_and_regression
  - coverage
  - style

style-check:
  tags:
    - cpu
  stage: style
  script:
    - python ./tst/style/cpplint.py --counting=detailed --recursive src example tst

parthenon-cuda-unit:
  tags:
    - cuda
  stage: unit
  script:
    - mkdir build-cuda-debug
    - cd build-cuda-debug
    - cmake -DCMAKE_BUILD_TYPE=Debug -DHDF5_ROOT=/usr/local/hdf5/parallel
      -DKokkos_ENABLE_OPENMP=True -DKokkos_ARCH_WSM=True
      -DKokkos_ENABLE_CUDA=True -DKokkos_ARCH_PASCAL61=True
      -DMPIEXEC_PREFLAGS="--allow-run-as-root"
      -DCMAKE_CXX_COMPILER=${PWD}/../external/Kokkos/bin/nvcc_wrapper
      ../
    - make -j${J}
    - ctest -j${J} -LE 'performance|regression'
  artifacts:
    when: always
    expire_in: 3 days
    paths:
      - build-cuda-debug/CMakeFiles/CMakeOutput.log

# run unit suite on CPUs
parthenon-cpu-unit:
  tags:
    - cpu
  stage: unit
  script:
    - mkdir build-debug
    - cd build-debug
    - cmake -DCMAKE_BUILD_TYPE=Debug -DHDF5_ROOT=/usr/local/hdf5/parallel
      -DKokkos_ENABLE_OPENMP=True -DKokkos_ARCH_WSM=True
      -DMPIEXEC_PREFLAGS="--allow-run-as-root"
      ../
    - make -j${J}
    - ctest -j${J} -LE "performance|regression"
  artifacts:
    when: always
    expire_in: 3 days
    paths:
      - build-debug/CMakeFiles/CMakeOutput.log

parthenon-cuda-performance_and_regression:
  tags:
    - cuda
  stage: performance_and_regression
  script:
    - mkdir build-cuda-perf
    - cd build-cuda-perf
    - cmake -DCMAKE_BUILD_TYPE=Release -DHDF5_ROOT=/usr/local/hdf5/serial
      -DKokkos_ENABLE_OPENMP=True -DKokkos_ARCH_WSM=True
      -DKokkos_ENABLE_CUDA=True -DKokkos_ARCH_PASCAL61=True
      -DCMAKE_CXX_COMPILER=${PWD}/../external/Kokkos/bin/nvcc_wrapper
      -DPARTHENON_DISABLE_MPI=ON
      ../
    - make -j${J}
    - ctest -L "performance|regression" -LE "mpi-yes|perf-reg"
  artifacts:
    when: always
    expire_in: 3 days
    paths:
      - build-cuda-perf/CMakeFiles/CMakeOutput.log
      - build-cuda-perf/tst/regression/outputs/advection_convergence/advection-errors.dat
      - build-cuda-perf/tst/regression/outputs/advection_convergence/advection-errors.png

parthenon-cuda-performance_and_regression-mpi:
  tags:
    - cuda
  stage: performance_and_regression
  script:
    - mkdir build-cuda-perf-mpi
    - cd build-cuda-perf-mpi
    - cmake -DCMAKE_BUILD_TYPE=Release -DHDF5_ROOT=/usr/local/hdf5/parallel
      -DKokkos_ENABLE_OPENMP=True -DKokkos_ARCH_WSM=True
      -DKokkos_ENABLE_CUDA=True -DKokkos_ARCH_PASCAL61=True
      -DMPIEXEC_PREFLAGS="--allow-run-as-root"
      -DCMAKE_CXX_COMPILER=${PWD}/../external/Kokkos/bin/nvcc_wrapper
      ../
    - make -j${J} 
    - export OMPI_MCA_mpi_common_cuda_event_max=1000
#    - ctest -L "performance" # no need for performance test as currently none use MPI
    - ctest -L regression -LE "mpi-no|perf-reg" --timeout 3600
  artifacts:
    when: always
    expire_in: 3 days
    paths:
      - build-cuda-perf-mpi/CMakeFiles/CMakeOutput.log
      - build-cuda-perf-mpi/tst/regression/outputs/advection_convergence_mpi/advection-errors.dat
      - build-cuda-perf-mpi/tst/regression/outputs/advection_convergence_mpi/advection-errors.png

# run performance and regression on CPUs without MPI
parthenon-cpu-performance_and_regression:
  tags:
    - cpu
  stage: performance_and_regression
  script:
    - mkdir build-perf
    - cd build-perf
    - cmake -DCMAKE_BUILD_TYPE=Release -DHDF5_ROOT=/usr/local/hdf5/serial
      -DKokkos_ENABLE_OPENMP=True -DKokkos_ARCH_WSM=True
      -DPARTHENON_DISABLE_MPI=ON
      ../
    - make -j${J}
    - ctest -L "performance|regression" -LE "mpi-yes|perf-reg"
  artifacts:
    when: always
    expire_in: 3 days
    paths:
      - build-perf/CMakeFiles/CMakeOutput.log
      - build-perf/tst/regression/outputs/advection_convergence/advection-errors.dat
      - build-perf/tst/regression/outputs/advection_convergence/advection-errors.png

# run performance and regression on CPUs with MPI
parthenon-cpu-performance_and_regression-mpi:
  tags:
    - cpu
  stage: performance_and_regression
  script:
    - mkdir build-perf-mpi
    - cd build-perf-mpi
    - cmake -DCMAKE_BUILD_TYPE=Release -DHDF5_ROOT=/usr/local/hdf5/parallel
      -DKokkos_ENABLE_OPENMP=True -DKokkos_ARCH_WSM=True
      -DMPIEXEC_PREFLAGS="--allow-run-as-root"
      ../
    - make -j${J}
#    - ctest -L "performance" # no need for performance test as currently none use MPI
    - ctest -L regression -LE "mpi-no|perf-reg"
  artifacts:
    when: always
    expire_in: 3 days
    paths:
      - build-perf-mpi/CMakeFiles/CMakeOutput.log
      - build-perf-mpi/tst/regression/outputs/advection_convergence_mpi/advection-errors.dat
      - build-perf-mpi/tst/regression/outputs/advection_convergence_mpi/advection-errors.png

# run unit suite on CPUs with code coverage
parthenon-cpu-coverage:
  tags:
    - cpu
  stage: coverage
  script:
    - mkdir build-debug-coverage
    - cd build-debug-coverage
    - cmake -DCMAKE_BUILD_TYPE=Debug -DHDF5_ROOT=/usr/local/hdf5/parallel
      -DKokkos_ENABLE_OPENMP=True -DKokkos_ARCH_WSM=True
      -DMPIEXEC_PREFLAGS="--allow-run-as-root" -DCODE_COVERAGE=ON
      ../ && make -j${J} && make coverage && make coverage-upload
  artifacts:
    when: always
    expire_in: 3 days
    paths:
      - build-debug-coverage/CMakeFiles/CMakeOutput.log


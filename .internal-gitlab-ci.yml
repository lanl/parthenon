image: cuda10.0-mpi-hdf5-mpl

variables:
  SCHEDULER_PARAMETERS: "--nodes=1 --partition=power9"

# Is performed before the scripts in the stages step
before_script:
    - export OMP_PROC_BIND=close
    - export OMP_PLACES=cores
    - export OMP_NUM_THREADS=1
    - export CMAKE_VERSION=3.10.3
    - export CTEST_OUTPUT_ON_FAILURE=1
    - export J=$(( $(nproc --all) / 4  + 1 )) && echo Using ${J} cores during build
    - wget -qO- http://www.cmake.org/files/v${CMAKE_VERSION:0:4}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz | tar -xz
    - export PATH=${PWD}/cmake-${CMAKE_VERSION}-Linux-x86_64/bin:$PATH
    - export GOLD_STANDARD_VER=2
    - if [ `cat tst/regression/gold_standard/current_version` != ${GOLD_STANDARD_VER} ]; then
      echo "Updating regression Gold standard to ${GOLD_STANDARD_VER}." &&
      wget -qO- https://pgrete.de/dl/parthenon_regression_gold_r${GOLD_STANDARD_VER}.tgz | tar -xz -C tst/regression/gold_standard; fi
    - update-alternatives --install /usr/bin/python python /usr/bin/python3 10

cache:
  paths:
    - tst/regression/gold_standard/

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  
stages:
  - unit

parthenon-cuda-unit:

  stage: unit
  script:
# mitigate UVM allocations on older multi-GPU systems
#    - export CUDA_LAUNCH_BLOCKING=1
#    - export CUDA_VISIBLE_DEVICES=0
    - mkdir build-cuda-debug
    - cd build-cuda-debug
    - cmake -DCMAKE_BUILD_TYPE=Debug -DHDF5_ROOT=/usr/local/hdf5/parallel
      -DKokkos_ENABLE_OPENMP=True -DKokkos_ARCH_WSM=True
      -DKokkos_ENABLE_CUDA=True -DKokkos_ARCH_PASCAL61=True
      -DMPIEXEC_PREFLAGS="--allow-run-as-root"
      -DCMAKE_CXX_COMPILER=${PWD}/../external/Kokkos/bin/nvcc_wrapper
      ../ && make -j${J} && ctest -j${J} -LE 'performance|regression'
    - cd ..
  artifacts:
    when: always
    expire_in: 3 days
    paths:
      - build-cuda-debug/CMakeFiles/CMakeOutput.log
      - build-cuda-debug-uvm/CMakeFiles/CMakeOutput.log


